{"ts":1377965977924,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\r\n--------------------------------------------------------\r\ndateformat.js - Simple date formatter\r\nVersion 1.1 (Update 2008/04/02)\r\n\r\nCopyright (c) 2007-2008 onozaty (http://www.enjoyxstudy.com)\r\n\r\nReleased under an MIT-style license.\r\n\r\nFor details, see the web site:\r\n http://www.enjoyxstudy.com/javascript/dateformat/\r\n\r\n--------------------------------------------------------\r\npatterns\r\ny : Year         ex. \"yyyy\" -> \"2007\", \"yy\" -> \"07\"\r\nM : Month        ex. \"MM\" -> \"05\" \"12\", \"M\" -> \"5\" \"12\"\r\nd : Day          ex. \"dd\" -> \"09\" \"30\", \"d\" -> \"9\" \"30\"\r\nH : Hour (0-23)  ex. \"HH\" -> \"00\" \"23\", \"H\" -> \"0\" \"23\"\r\nm : Minute       ex. \"mm\" -> \"01\" \"59\", \"m\" -> \"1\" \"59\"\r\ns : Second       ex. \"ss\" -> \"00\" \"59\", \"H\" -> \"0\" \"59\"\r\nS : Millisecond  ex. \"SSS\" -> \"000\" \"012\" \"999\", \r\n                     \"SS\" -> \"00\" \"12\" \"999\", \"S\" -> \"0\" \"12\" \"999\"\r\n\r\nText can be quoted using single quotes (') to avoid interpretation.\r\n\"''\" represents a single quote. \r\n\r\n\r\nUseing..\r\n\r\n var fmt = new DateFormat(\"yyyy/MM/dd HH:mm:ss SSS\");\r\n\r\n var str = fmt.format(new Date()); // \"2007/05/10 12:21:19 002\"\r\n var date = fmt.parse(\"2007/05/10 12:21:19 002\"); // return Date object\r\n\r\n--------------------------------------------------------\r\n*/\r\n\r\nvar DateFormat = function(pattern) {\r\n  this._init(pattern);\r\n};\r\n\r\nDateFormat.prototype = {\r\n  _init: function(pattern) {\r\n\r\n    this.pattern = pattern;\r\n    this._patterns = [];\r\n\r\n    for (var i = 0; i < pattern.length; i++) {\r\n      var ch = pattern.charAt(i);\r\n      if (this._patterns.length == 0) {\r\n        this._patterns[0] = ch;\r\n      } else {\r\n        var index = this._patterns.length - 1;\r\n        if (this._patterns[index].charAt(0) == \"'\") {\r\n          if (this._patterns[index].length == 1 \r\n             || this._patterns[index].charAt(this._patterns[index].length - 1) != \"'\") {\r\n            this._patterns[index] += ch;\r\n          } else {\r\n            this._patterns[index + 1] = ch;\r\n          }\r\n        } else if (this._patterns[index].charAt(0) == ch) {\r\n          this._patterns[index] += ch;\r\n        } else {\r\n          this._patterns[index + 1] = ch;\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  format: function(date) {\r\n\r\n    var result = [];\r\n    for (var i = 0; i < this._patterns.length; i++) {\r\n      result[i] = this._formatWord(date, this._patterns[i]);\r\n    }\r\n    return result.join('');\r\n  },\r\n  _formatWord: function(date, pattern) {\r\n\r\n    var formatter = this._formatter[pattern.charAt(0)];\r\n    if (formatter) {\r\n      return formatter.apply(this, [date, pattern]);\r\n    } else {\r\n      return pattern;\r\n    }\r\n  },\r\n  _formatter: {\r\n    \"y\": function(date, pattern) {\r\n      // Year\r\n      var year = String(date.getFullYear());\r\n      if (pattern.length <= 2) {\r\n        year = year.substring(2, 4);\r\n      } else {\r\n        year = this._zeroPadding(year, pattern.length);\r\n      }\r\n      return year;\r\n    },\r\n    \"M\": function(date, pattern) {\r\n      // Month in year\r\n      return this._zeroPadding(String(date.getMonth() + 1), pattern.length);\r\n    },\r\n    \"d\": function(date, pattern) {\r\n      // Day in month\r\n      return this._zeroPadding(String(date.getDate()), pattern.length);\r\n    },\r\n    \"H\": function(date, pattern) {\r\n      // Hour in day (0-23)\r\n      return this._zeroPadding(String(date.getHours()), pattern.length);\r\n    },\r\n    \"m\": function(date, pattern) {\r\n      // Minute in hour\r\n      return this._zeroPadding(String(date.getMinutes()), pattern.length);\r\n    },\r\n    \"s\": function(date, pattern) {\r\n      // Second in minute\r\n      return this._zeroPadding(String(date.getSeconds()), pattern.length);\r\n    },\r\n    \"S\": function(date, pattern) {\r\n      // Millisecond\r\n      return this._zeroPadding(String(date.getMilliseconds()), pattern.length);\r\n    },\r\n    \"'\": function(date, pattern) {\r\n      // escape\r\n      if (pattern == \"''\") {\r\n        return \"'\";\r\n      } else {\r\n        return pattern.replace(/'/g, '');\r\n      }\r\n    }\r\n  },\r\n\r\n  _zeroPadding: function(str, length) {\r\n    if (str.length >= length) {\r\n      return str;\r\n    }\r\n\r\n    return new Array(length - str.length + 1).join(\"0\") + str;\r\n  },\r\n\r\n\r\n  /// Parser ///\r\n  parse: function(text) {\r\n\r\n    if (typeof text != 'string' || text == '') return null;\r\n\r\n    var result = {year: 1970, month: 1, day: 1, hour: 0, min: 0, sec: 0, msec: 0};\r\n\r\n    for (var i = 0; i < this._patterns.length; i++) {\r\n       if (text == '') return null; // parse error!!\r\n       text = this._parseWord(text, this._patterns[i], result);\r\n       if (text === null) return null; // parse error!!\r\n    }\r\n    if (text != '') return null; // parse error!!\r\n\r\n    return new Date(\r\n                result.year,\r\n                result.month - 1,\r\n                result.day,\r\n                result.hour,\r\n                result.min,\r\n                result.sec,\r\n                result.msec);\r\n  },\r\n  _parseWord: function(text, pattern, result) {\r\n\r\n    var parser = this._parser[pattern.charAt(0)];\r\n    if (parser) {\r\n      return parser.apply(this, [text, pattern, result]);\r\n    } else {\r\n      if (text.indexOf(pattern) != 0) {\r\n        return null;\r\n      } else {\r\n        return text.substring(pattern.length);\r\n      }\r\n    }\r\n  },\r\n  _parser: {\r\n    \"y\": function(text, pattern, result) {\r\n      // Year\r\n      var year;\r\n      if (pattern.length <= 2) {\r\n        year = text.substring(0, 2);\r\n        year = year < 70 ? '20' + year : '19' + year;\r\n        text = text.substring(2);\r\n      } else {\r\n        var length = (pattern.length == 3) ? 4 : pattern.length;\r\n        year = text.substring(0, length);\r\n        text = text.substring(length);\r\n      }\r\n      if (!this._isNumber(year)) return null; // error\r\n      result.year = parseInt(year, 10);\r\n      return text;\r\n    },\r\n    \"M\": function(text, pattern, result) {\r\n      // Month in year\r\n      var month;\r\n      if (pattern.length == 1 && text.length > 1\r\n          && text.substring(0, 2).match(/1[0-2]/) != null) {\r\n        month = text.substring(0, 2);\r\n        text  = text.substring(2);\r\n      } else {\r\n        month = text.substring(0, pattern.length);\r\n        text  = text.substring(pattern.length);\r\n      }\r\n      if (!this._isNumber(month)) return null; // error\r\n      result.month = parseInt(month, 10);\r\n      return text;\r\n    },\r\n    \"d\": function(text, pattern, result) {\r\n      // Day in month\r\n      var day;\r\n      if (pattern.length == 1 && text.length > 1 \r\n          && text.substring(0, 2).match(/1[0-9]|2[0-9]|3[0-1]/) != null) {\r\n        day  = text.substring(0, 2);\r\n        text = text.substring(2);\r\n      } else {\r\n        day  = text.substring(0, pattern.length);\r\n        text = text.substring(pattern.length);\r\n      }\r\n      if (!this._isNumber(day)) return null; // error\r\n      result.day = parseInt(day, 10);\r\n      return text;\r\n    },\r\n    \"H\": function(text, pattern, result) {\r\n      // Hour in day (0-23)\r\n      var hour;\r\n      if (pattern.length == 1 && text.length > 1\r\n          && text.substring(0, 2).match(/1[0-9]|2[0-3]/) != null) {\r\n        hour = text.substring(0, 2);\r\n        text = text.substring(2);\r\n      } else {\r\n        hour = text.substring(0, pattern.length);\r\n        text = text.substring(pattern.length);\r\n      }\r\n      if (!this._isNumber(hour)) return null; // error\r\n      result.hour = parseInt(hour, 10);\r\n      return text;\r\n    },\r\n    \"m\": function(text, pattern, result) {\r\n      // Minute in hour\r\n      var min;\r\n      if (pattern.length == 1 && text.length > 1\r\n          && text.substring(0, 2).match(/[1-5][0-9]/) != null) {\r\n        min  = text.substring(0, 2);\r\n        text = text.substring(2);\r\n      } else {\r\n        min  = text.substring(0, pattern.length);\r\n        text = text.substring(pattern.length);\r\n      }\r\n      if (!this._isNumber(min)) return null; // error\r\n      result.min = parseInt(min, 10);\r\n      return text;\r\n    },\r\n    \"s\": function(text, pattern, result) {\r\n      // Second in minute\r\n      var sec;\r\n      if (pattern.length == 1 && text.length > 1\r\n          && text.substring(0, 2).match(/[1-5][0-9]/) != null) {\r\n        sec  = text.substring(0, 2);\r\n        text = text.substring(2);\r\n      } else {\r\n        sec  = text.substring(0, pattern.length);\r\n        text = text.substring(pattern.length);\r\n      }\r\n      if (!this._isNumber(sec)) return null; // error\r\n      result.sec = parseInt(sec, 10);\r\n      return text;\r\n    },\r\n    \"S\": function(text, pattern, result) {\r\n      // Millimsecond\r\n      var msec;\r\n      if (pattern.length == 1 || pattern.length == 2) {\r\n        if (text.length > 2 && text.substring(0, 3).match(/[1-9][0-9][0-9]/) != null) {\r\n          msec = text.substring(0, 3);\r\n          text = text.substring(3);\r\n        } else if (text.length > 1 && text.substring(0, 2).match(/[1-9][0-9]/) != null) {\r\n          msec = text.substring(0, 2);\r\n          text = text.substring(2);\r\n        } else {\r\n          msec = text.substring(0, pattern.length);\r\n          text = text.substring(pattern.length);\r\n        }\r\n      } else {\r\n        msec = text.substring(0, pattern.length);\r\n        text = text.substring(pattern.length);\r\n      }\r\n      if (!this._isNumber(msec)) return null; // error\r\n      result.msec = parseInt(msec, 10);\r\n      return text;\r\n    },\r\n    \"'\": function(text, pattern, result) {\r\n      // escape\r\n      if (pattern == \"''\") {\r\n        pattern = \"'\";\r\n      } else {\r\n        pattern = pattern.replace(/'/g, '');\r\n      }\r\n      if (text.indexOf(pattern) != 0) {\r\n        return null; // error\r\n      } else {\r\n        return text.substring(pattern.length);\r\n      }\r\n    }\r\n  },\r\n\r\n  _isNumber: function(str) {\r\n    return /^[0-9]*$/.test(str);\r\n  }\r\n}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":9644}]],"length":9644}
